/* Bison Prologue*/
%{
	#include <iostream>
	using namespace std;
	#include "part2_helpers.h"

	int yylex();
	void yyerror(const char*);
	ParserNode *parseTree;
%}

/* Bison Declarations */

%token INT FLOAT VOID OPTIONAL WHILE DO IF ID INTEGERNUM REALNUM STR '(' ')' '{' '}' '[' ']' ',' ';' ':'
%right ASSIGN
%left OR
%left AND
%left RELOP
%left ADDOP
%left MULOP
%right NOT

%right THEN ELSE /* Consider alternative (call 911) */

/* Bison Grammar rules */
%%

PROGRAM : FDEFS		{ parseTree = makeNode("PROGRAM",NULL,$1); }
;

FDEFS : FDEFS FUNC_DEF_API BLK { $$ = makeNode("FDEFS",NULL,concatList(concatList($1,$2),$3)); }
	| FDEFS FUNC_DEC_API { $$ = makeNode("FDEFS",NULL,concatList($1,$2)); }
	| /* epsilon */ { $$ = makeNode("FDEFS",NULL,makeNode("EPSILON",NULL,NULL)); }
;

FUNC_DEC_API : TYPE id '(' ')' ';' { $$ = makeNode("FUNC_DEC_API",NULL,concatList(concatList(concatList(concatList($1,$2),$3),$4),$5)); }
	| TYPE id '(' FUNC_ARGLIST ')' ';'	{ $$ = makeNode("FUNC_DEC_API",NULL,concateList(concatList(concatList(concatList(concatList($1,$2),$3),$4),$5),$6)); }
	| TYPE id '(' FUNC_DEC_ARGLIST_OPT ')' ';' { $$ = makeNode("FUNC_DEC_API",NULL,concateList(concatList(concatList(concatList(concatList($1,$2),$3),$4),$5),$6)); }
	| TYPE id '(' FUNC_ARGLIST ',' FUNC_DEC_ARGLIST_OPT ')' ';' { $$ = makeNode("FUNC_DEC_API",NULL,concateList(concateList(concateList(concatList(concatList(concatList(concatList($1,$2),$3),$4),$5),$6),$7),$8)); }
;

FUNC_DEC_ARGLIST_OPT : FUNC_DEC_ARGLIST_OPT',' DCL_OPT { $$ = makeNode("FUNC_DEC_ARGLIST_OPT",NULL,concatList(concatList($1,$2),$3)); } /* DO WE WANNA KNOW? */
	| DCL_OPT { $$ = makeNode("FUNC_DEC_ARGLIST_OPT",NULL,$1); }
;

DCL_OPT : id ':' optional TYPE { $$ = makeNode("DCL_OPT",NULL,concatList(concatList(concatList($1,$2),$3),$4));}
	| id',' DCL_OPT { $$ = makeNode("DCL_OPT",NULL,concatList(concatList($1,$2),$3)); }
;

FUNC_DEF_API : TYPE id '(' ')' { $$ = makeNode("FUNC_DEF_API",NULL,concatList(concatList(concatList($1,$2),$3),$4));}
	| TYPE id '(' FUNC_ARGLIST ')' { $$ = makeNode("FUNC_DEF_API",NULL,concatList(concatList(concatList(concatList($1,$2),$3),$4),$5)); }
	| TYPE id '(' FUNC_DEF_ARGLIST_OPT ')' { $$ = makeNode("FUNC_DEF_API",NULL,concatList(concatList(concatList(concatList($1,$2),$3),$4),$5)); }
	| TYPE id '(' FUNC_ARGLIST ',' FUNC_DEF_ARGLIST_OPT ')' { $$ = makeNode("FUNC_DEC_API",NULL,concateList(concateList(concateList(concatList(concatList(concatList(concatList($1,$2),$3),$4),$5),$6),$7)); }
;

FUNC_DEF_ARGLIST_OPT : FUNC_DEF_ARGLIST_OPT ',' DCL_OPT_VAL { $$ = makeNode("FUNC_DEF_ARGLIST_OPT",NULL,concatList(concatList($1,$2),$3)); }
	| DCL_OPT_VAL { $$ = makeNode("FUNC_DEF_ARGLIST_OPT",NULL,$1); }
;

DCL_OPT_VAL : id assign NUM ':' optional TYPE { $$ = makeNode("DCL_OPT_VAL",NULL,concateList(concatList(concatList(concatList(concatList($1,$2),$3),$4),$5),$6)); }
	| id assign NUM ',' DCL_OPT_VAL { $$ = makeNode("DCL_OPT_VAL",NULL,concatList(concatList(concatList(concatList($1,$2),$3),$4),$5)); }
;

FUNC_ARGLIST : FUNC_ARGLIST ',' DCL { $$ = makeNode("FUNC_ARGLIST",NULL,concatList(concatList($1,$2),$3)); }
	| DCL { $$ = makeNode("FUNC_ARGLIST",NULL,$1); }
;

BLK : '{' STLIST '}' { $$ = makeNode("BLK",NULL,concatList(concatList($1,$2),$3)); }
;

DCL : id ':' TYPE { $$ = makeNode("DCL",NULL,concatList(concatList($1,$2),$3)); }
	| id ',' DCL { $$ = makeNode("DCL",NULL,concatList(concatList($1,$2),$3)); }
;

TYPE : int { $$ = makeNode("TYPE",NULL,$1); }
	| float { $$ = makeNode("TYPE",NULL,$1); }
	| void { $$ = makeNode("TYPE",NULL,$1); }
;

STLIST : STLIST STMT { $$ = makeNode("STLIST",NULL,concatList($1,$2)); }
	| /* epsilon */ { $$ = makeNode("STLIST",NULL,makeNode("EPSILON",NULL,NULL)); }
;

STMT : DCL ';' { $$ = makeNode("STMT",NULL,concatList($1,$2)); }
	| ASSN { $$ = makeNode("STMT",NULL,$1); }
	| EXP ';' { $$ = makeNode("STMT",NULL,concatList($1,$2)); }
	| CNTRL { $$ = makeNode("STMT",NULL,$1); }
	| READ { $$ = makeNode("STMT",NULL,$1); }
	| WRITE { $$ = makeNode("STMT",NULL,$1); }
	| RETURN { $$ = makeNode("STMT",NULL,$1); }
	| BLK { $$ = makeNode("STMT",NULL,$1); }
;

RETURN : return EXP ';' { $$ = makeNode("RETURN",NULL,concatList(concatList($1,$2),$3)); }
	| return';' { $$ = makeNode("RETURN",NULL,concatList($1,$2)); }
;

WRITE : write '(' EXP ')' ';' { $$ = makeNode("WRITE",NULL,concatList(concatList(concatList(concatList($1,$2),$3),$4),$5)); }
	| write '(' str ')' ';' { $$ = makeNode("WRITE",NULL,concatList(concatList(concatList(concatList($1,$2),$3),$4),$5)); }
;

READ : read '(' LVAL ')' ';' { $$ = makeNode("READ",NULL,concatList(concatList(concatList(concatList($1,$2),$3),$4),$5)); }
;

ASSN : LVAL assign EXP ';' { $$ = makeNode("ASSN",NULL,concatList(concatList(concatList($1,$2),$3),$4));}
;

LVAL : id { $$ = makeNode("LVAL",NULL,$1); }
;

CNTRL : if BEXP then STMT else STMT { $$ = makeNode("CNTRL",NULL,concateList(concatList(concatList(concatList(concatList($1,$2),$3),$4),$5),$6)); }
	| if BEXP then STMT { $$ = makeNode("CNTRL",NULL,concatList(concatList(concatList($1,$2),$3),$4));}
	| while BEXP do STMT { $$ = makeNode("CNTRL",NULL,concatList(concatList(concatList($1,$2),$3),$4));}
;

BEXP : BEXP or BEXP { $$ = makeNode("BEXP",NULL,concatList(concatList($1,$2),$3)); }
	| BEXP and BEXP { $$ = makeNode("BEXP",NULL,concatList(concatList($1,$2),$3)); }
	| not BEXP { $$ = makeNode("BEXP",NULL,concatList($1,$2)); }
	| EXP relop EXP { $$ = makeNode("BEXP",NULL,concatList(concatList($1,$2),$3)); }
	| '(' BEXP ')' { $$ = makeNode("BEXP",NULL,concatList(concatList($1,$2),$3)); }
;

EXP : EXP addop EXP { $$ = makeNode("EXP",NULL,concatList(concatList($1,$2),$3)); }
	| EXP mulop EXP { $$ = makeNode("EXP",NULL,concatList(concatList($1,$2),$3)); }
	| '(' EXP ')' { $$ = makeNode("EXP",NULL,concatList(concatList($1,$2),$3)); }
	| '(' TYPE ')' EXP { $$ = makeNode("EXP",NULL,concatList(concatList(concatList($1,$2),$3),$4));}
	| id { $$ = makeNode("EXP",NULL,$1); }
	| NUM { $$ = makeNode("EXP",NULL,$1); }
	| CALL { $$ = makeNode("EXP",NULL,$1); }
;

NUM : integernum { $$ = makeNode("NUM",NULL,$1); }
	| realnum { $$ = makeNode("NUM",NULL,$1); }
;

CALL : id '(' CALL_ARGS ')' { $$ = makeNode("CALL",NULL,concatList(concatList(concatList($1,$2),$3),$4));}
;

CALL_ARGS : CALL_ARGS { $$ = makeNode("CALL_ARGS",NULL,$1); }
	| /* epsilon */ { $$ = makeNode("CALL_ARGS",NULL,makeNode("EPSILON",NULL,NULL)); }
;

CALL_ARGSLIST : CALL_ARGSLIST ',' EXP { $$ = makeNode("CALL_ARGSLIST",NULL,concatList(concatList($1,$2),$3)); }
	| EXP { $$ = makeNode("CALL_ARGSLIST",NULL,$1); }
;

%%

/* Bison Epilogue */

void yyerror(const char*){
	cout << "Syntax error: '" << yytext << "' in line number " << ylineno << endl;
	exit(2);
}

